{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","selectedTodo","onSelect","isTodoSelected","id","className","cn","completed","title","type","onClick","TodoList","todos","map","TodoFilter","React","memo","searchQuery","setSearchQuery","isCompleted","setIsCompleted","onSubmit","event","preventDefault","value","onChange","target","placeholder","preparedSearchQuery","toLowerCase","trim","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","userId","useState","user","setUser","useEffect","getUser","userFromServer","href","email","name","App","setTodos","isLoading","setIsLoading","setSelectedTodo","todosFromServer","visibleTodos","filter","includes","filterByStatus","todosList","todoStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a550a129.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedTodo: Todo | null;\n  onSelect: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  onSelect,\n}) => {\n  const isTodoSelected = todo.id === selectedTodo?.id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isTodoSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        { todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelect(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isTodoSelected,\n              'fa-eye-slash': isTodoSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\n// import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onSelect: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelect,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onSelect={onSelect}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ntype Props = {\n  searchQuery: string;\n  setSearchQuery: (searchQuery: string) => void;\n  isCompleted: string;\n  setIsCompleted: (todoStatus: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  searchQuery,\n  setSearchQuery,\n  isCompleted,\n  setIsCompleted,\n}) => {\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const handleSearchQueryChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const preparedSearchQuery = event.target.value.toLowerCase().trim();\n\n    setSearchQuery(preparedSearchQuery);\n  };\n\n  const handleSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setIsCompleted(event.target.value);\n  };\n\n  const handleClear = () => {\n    setSearchQuery('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleFormSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={isCompleted}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleSearchQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchQuery !== ''\n              && (\n                // eslint-disable-next-line jsx-a11y/control-has-associated-label\n                <button\n                  data-cy=\"clearSearchButton\"\n                  type=\"button\"\n                  className=\"delete\"\n                  onClick={handleClear}\n                />\n              )}\n        </span>\n      </p>\n    </form>\n\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = React.memo(({ todo, onClose }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"close\"\n                data-cy=\"modal-close\"\n                onClick={() => onClose()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCompleted, setIsCompleted] = useState('all');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setIsLoading(true);\n      });\n  }, []);\n\n  let visibleTodos = [...todos];\n\n  if (searchQuery) {\n    visibleTodos = visibleTodos.filter(todo => todo.title.toLowerCase().includes(searchQuery));\n  }\n\n  const filterByStatus = (todosList: Todo[], todoStatus: boolean) => (\n    todosList.filter(todo => todo.completed === todoStatus)\n  );\n\n  if (isCompleted === 'completed') {\n    visibleTodos = filterByStatus(visibleTodos, true);\n  }\n\n  if (isCompleted === 'active') {\n    visibleTodos = filterByStatus(visibleTodos, false);\n  }\n\n  const selectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const clearSelectTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n                isCompleted={isCompleted}\n                setIsCompleted={setIsCompleted}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    onSelect={selectTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={clearSelectTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}